{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Task 1: Supervised Learning  #GRIPMAY21","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1619989524773}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"VDxo-8V4H75H"},"source":["# **GRIP: THE SPARKS FOUNDATION**\n","# **Author: Christina Joseph**\n","__Data Science and Business Analytics Intern__ \n","\n","# **Task 1: Prediction using Supervised Machine Learning**\n","__Problem Statement:__\n","\n","In this task, we need to predict the percentage score of a student based on the number of hours studied by using the Linear Regression supervised machine learning algorithm. This tasks consists of just two variables where the feature is the number of hours studied and the target value is the percentage score.This is a simple Linear Regression task\n","\n","__Data Description:__\n","\n","The given Dataset consists of two continuous variables i.e number of study hours and the marks scored by an individual.\n","\n","__Linear Regression with Python Scikit Learn:__\n","\n","In this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"UvgOi5A_e4Bg"},"source":["#Step 1: Importing the Dataset"]},{"cell_type":"code","metadata":{"id":"cLUSvg7UHBBc","executionInfo":{"status":"ok","timestamp":1620027012642,"user_tz":-330,"elapsed":1513,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}}},"source":["#importing the required libraries\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","import seaborn as sns"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j55ONfVrHEdl","executionInfo":{"status":"ok","timestamp":1620027013070,"user_tz":-330,"elapsed":1933,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"e5bc2500-b2b2-420b-8a63-2a18596c3823"},"source":["# Reading the data from remote link\n","url = \"http://bit.ly/w-data\"\n","df = pd.read_csv(url)\n","print('Data Successfully imported')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Data Successfully imported\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"lJDPqpE9HHa2","executionInfo":{"status":"ok","timestamp":1620027013071,"user_tz":-330,"elapsed":1926,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"5eb2d5d8-22c5-4986-ceec-962d3df48650"},"source":["#returns first few rows\n","df.head()"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hours</th>\n","      <th>Scores</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.5</td>\n","      <td>21</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.1</td>\n","      <td>47</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.2</td>\n","      <td>27</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8.5</td>\n","      <td>75</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.5</td>\n","      <td>30</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Hours  Scores\n","0    2.5      21\n","1    5.1      47\n","2    3.2      27\n","3    8.5      75\n","4    3.5      30"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L2PiTCBrHLXW","executionInfo":{"status":"ok","timestamp":1620027013072,"user_tz":-330,"elapsed":1920,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"69ae6b05-c283-40ca-e98a-c678869d0dc8"},"source":["#dimensions of the dataframe\n","df.shape"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(25, 2)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":297},"id":"rFiSLJYSJu3B","executionInfo":{"status":"ok","timestamp":1620027013074,"user_tz":-330,"elapsed":1916,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"f453fb61-e516-4f14-9d52-dec529525f83"},"source":["#statistical description of the dataframe\n","df.describe()"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hours</th>\n","      <th>Scores</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>5.012000</td>\n","      <td>51.480000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.525094</td>\n","      <td>25.286887</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.100000</td>\n","      <td>17.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2.700000</td>\n","      <td>30.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>4.800000</td>\n","      <td>47.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>7.400000</td>\n","      <td>75.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>9.200000</td>\n","      <td>95.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           Hours     Scores\n","count  25.000000  25.000000\n","mean    5.012000  51.480000\n","std     2.525094  25.286887\n","min     1.100000  17.000000\n","25%     2.700000  30.000000\n","50%     4.800000  47.000000\n","75%     7.400000  75.000000\n","max     9.200000  95.000000"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LT5_L4pXKxXf","executionInfo":{"status":"ok","timestamp":1620027013076,"user_tz":-330,"elapsed":1911,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"9f25e493-2ee2-4fcb-cc91-64e88bc9ab45"},"source":["#concise summary of the dataset\n","df.info()"],"execution_count":6,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 25 entries, 0 to 24\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   Hours   25 non-null     float64\n"," 1   Scores  25 non-null     int64  \n","dtypes: float64(1), int64(1)\n","memory usage: 528.0 bytes\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2ZtHqzBYLbS6"},"source":["#Step 2: Visualizing the dataset"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"9zjE7zkTMa2t","executionInfo":{"status":"ok","timestamp":1620027013767,"user_tz":-330,"elapsed":2595,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"f33c4987-65e1-4be7-f97d-fe5751efa3ff"},"source":["# Plotting the distribution of scores\n","df.plot(x='Hours', y='Scores', style='*', markersize=10)  \n","plt.title('Hours vs Percentage Score')  \n","plt.xlabel('Hours Studied')  \n","plt.ylabel('Percentage Score') \n","plt.grid() \n","plt.show()"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"wzxh5lJgedDq"},"source":["The specified graph demonstrates a positive linear relation between the number of hours studied and percentage of score."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":111},"id":"trIvWskyNK6O","executionInfo":{"status":"ok","timestamp":1620027013768,"user_tz":-330,"elapsed":2589,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"ccc033b2-3b21-42b4-dfd2-9b65fb778292"},"source":["#to determine the correlation between the two variables\n","df.corr()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Hours</th>\n","      <th>Scores</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Hours</th>\n","      <td>1.000000</td>\n","      <td>0.976191</td>\n","    </tr>\n","    <tr>\n","      <th>Scores</th>\n","      <td>0.976191</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["           Hours    Scores\n","Hours   1.000000  0.976191\n","Scores  0.976191  1.000000"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"5vpJpxhifwxi"},"source":["It is clearly visible that there is a positive correlation between these two variables."]},{"cell_type":"markdown","metadata":{"id":"SxczuZXER5sD"},"source":["#Step 3: Data Preparation"]},{"cell_type":"markdown","metadata":{"id":"jllKG89BShHr"},"source":["In this particular step, we will divide the data into 'feature'(input) and 'target'(output) as mentioned here as x and y respectively."]},{"cell_type":"code","metadata":{"id":"Bc9r23qESQLo","executionInfo":{"status":"ok","timestamp":1620027013769,"user_tz":-330,"elapsed":2583,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}}},"source":["x=df.iloc[:,:-1]\n","y=df.iloc[:,-1]"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FK7WfXl6RYte"},"source":["#Step 4: Splitting the data into train set and the test set"]},{"cell_type":"markdown","metadata":{"id":"4onepp5ETUfK"},"source":["After preparing the data, we need to split the whole dataset into two parts- training and testing set"]},{"cell_type":"code","metadata":{"id":"1yuWyxlfOrBD","executionInfo":{"status":"ok","timestamp":1620027014272,"user_tz":-330,"elapsed":3082,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}}},"source":["# Importing the train test split function\n","from sklearn.model_selection import train_test_split\n","train_x,test_x,train_y,test_y = train_test_split(x,y,test_size=0.2, random_state=0)"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WE4bJlW5VEpU"},"source":["#Step 5: Implementing Linear Regression"]},{"cell_type":"markdown","metadata":{"id":"O79_JSIEUdvn"},"source":["As we have split our data into training and testing sets,and now is finally the time to train our algorithm. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qEG402uYUeQz","executionInfo":{"status":"ok","timestamp":1620027014275,"user_tz":-330,"elapsed":3080,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"3de9ccda-38a4-4ba6-f2bf-028ac283b6c3"},"source":["#importing Linear Regression \n","from sklearn.linear_model import LinearRegression as LR\n","# Creating instance of Linear Regresssion\n","lr = LR()\n","\n","# Fitting the model\n","lr.fit(train_x, train_y)\n","\n","print(\"Training complete.\")"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Training complete.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"383R_FIJWzdM"},"source":["Parameters of Linear Regression"]},{"cell_type":"code","metadata":{"id":"KFw8j8PxWH33","executionInfo":{"status":"ok","timestamp":1620027014276,"user_tz":-330,"elapsed":3076,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}}},"source":["m=lr.coef_\n","c=lr.intercept_"],"execution_count":12,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-JVZA-xjY-mR"},"source":["so here, m= determines the slope of the line and c= determines the intercept of the line"]},{"cell_type":"markdown","metadata":{"id":"CMgMqkWCZd_Z"},"source":["#Step 6: Visulaizing the model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"UvnimMtMZnKu","executionInfo":{"status":"ok","timestamp":1620027014277,"user_tz":-330,"elapsed":3072,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"84c0b648-17e6-4a55-bca2-903dd50dca18"},"source":["line=m*x+c\n","plt.scatter(x, y, color='green')\n","plt.plot(x, line, color='red')\n","plt.xlabel('Hours Studied')\n","plt.ylabel('Percentage Score')\n","plt.grid()\n","plt.show()"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hmLXFRhBiygA","executionInfo":{"status":"ok","timestamp":1620027014277,"user_tz":-330,"elapsed":3066,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"8bbaddab-d059-4e8e-858d-c2609e34d565"},"source":["print(\"Training Score: \",lr.score(train_x,train_y)*100)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Training Score:  95.15510725211553\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VSXa5GbSXAec"},"source":["#Step 7: Making Predictions"]},{"cell_type":"markdown","metadata":{"id":"rSddLUFSgx6I"},"source":["Now that we have trained our algorithm, it's time to make some predictions"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NumYy5NzW_Oo","executionInfo":{"status":"ok","timestamp":1620027014278,"user_tz":-330,"elapsed":3061,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"bd76fcdc-238d-44cc-a96a-d0329ee8804c"},"source":["y_pred = lr.predict(test_x) # Predicting the scores\n","y_pred"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([16.88414476, 33.73226078, 75.357018  , 26.79480124, 60.49103328])"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"wEVDOEPnrlYh"},"source":["Comparing actual data and predicted data"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"id":"Lkft7DfTjYMj","executionInfo":{"status":"ok","timestamp":1620027014279,"user_tz":-330,"elapsed":3055,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"1f6183ed-dc11-43e9-e16c-3399f4492c39"},"source":["df = pd.DataFrame({'Actual': test_y, 'predicted':y_pred,'Error':test_y-y_pred})\n","df"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Actual</th>\n","      <th>predicted</th>\n","      <th>Error</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>20</td>\n","      <td>16.884145</td>\n","      <td>3.115855</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>27</td>\n","      <td>33.732261</td>\n","      <td>-6.732261</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>69</td>\n","      <td>75.357018</td>\n","      <td>-6.357018</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>30</td>\n","      <td>26.794801</td>\n","      <td>3.205199</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>62</td>\n","      <td>60.491033</td>\n","      <td>1.508967</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    Actual  predicted     Error\n","5       20  16.884145  3.115855\n","2       27  33.732261 -6.732261\n","19      69  75.357018 -6.357018\n","16      30  26.794801  3.205199\n","11      62  60.491033  1.508967"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"d_YtE0xmtPLF"},"source":["#Step 8: Model Evaluation"]},{"cell_type":"markdown","metadata":{"id":"4EJKBrnJzkHx"},"source":["There are 3 main metrics for model evaluation in regression:\n","1. Mean Absolute Error(MAE)\n","2. Mean Square Error(MSE)/Root Mean Square Error(RMSE)\n","3. R Square/Adjusted R Square"]},{"cell_type":"code","metadata":{"id":"GzRVzDivr7ri","executionInfo":{"status":"ok","timestamp":1620027014279,"user_tz":-330,"elapsed":3047,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}}},"source":["#importing evaluation metrics\n","from sklearn.metrics import mean_absolute_error as mae\n","from sklearn.metrics import mean_squared_error as mse\n","from sklearn.metrics import r2_score"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"edSFQ1OSudTB","executionInfo":{"status":"ok","timestamp":1620027014280,"user_tz":-330,"elapsed":3044,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"ccb916e1-aa33-494e-e72c-cdf7ca22a6c9"},"source":["#mean_absolute_error\n","print(\"Mean absolute error: \", mae(test_y,y_pred))"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Mean absolute error:  4.183859899002982\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5Cc8TSt2unB7","executionInfo":{"status":"ok","timestamp":1620027014281,"user_tz":-330,"elapsed":3039,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"e79d4907-9729-4917-eda4-9a27564b192e"},"source":["#mean_squared_error\n","print(\"Mean squared error: \", mse(test_y,y_pred))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Mean squared error:  21.598769307217456\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p-qcQ_lwuxwO","executionInfo":{"status":"ok","timestamp":1620027014282,"user_tz":-330,"elapsed":3034,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"5240a2d3-d020-4b1f-cea7-270f8bdd81d3"},"source":["#root_mean_squared_error\n","print(\"Root Mean Squared Error: \",mse(test_y,y_pred,squared=False))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Root Mean Squared Error:  4.647447612100373\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sj31ToUBvfNf","executionInfo":{"status":"ok","timestamp":1620027014282,"user_tz":-330,"elapsed":3029,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"fbd1ea22-6dca-40fd-bc0d-f14afc5331a9"},"source":["#r2_score\n","print(\"r2_score: \",r2_score(test_y,y_pred))"],"execution_count":21,"outputs":[{"output_type":"stream","text":["r2_score:  0.9454906892105354\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"hz9dDCavwxlc"},"source":["#What would be the predicted score if the student studies for 9.25 hours/day?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QA1jid4Cw_zs","executionInfo":{"status":"ok","timestamp":1620027014283,"user_tz":-330,"elapsed":3024,"user":{"displayName":"Christina Joseph","photoUrl":"","userId":"11730007056188695354"}},"outputId":"e55e1744-8668-41ff-974a-219b3ab8492d"},"source":["hours = [[9.25]]\n","pred = lr.predict(hours)\n","print(\"Predicted Score if the student studies for 9.25 hours/day = {}\".format(pred[0]))"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Predicted Score if the student studies for 9.25 hours/day = 93.69173248737539\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"CjThM0ki4lc4"},"source":["                                                       ****************"]}]}